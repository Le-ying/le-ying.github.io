<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kung&#39;s Blog</title>
  
  <subtitle>欢迎来到我的博客!</subtitle>
  <link href="https://serika-onoe.github.io/atom.xml" rel="self"/>
  
  <link href="https://serika-onoe.github.io/"/>
  <updated>2022-12-11T06:55:19.657Z</updated>
  <id>https://serika-onoe.github.io/</id>
  
  <author>
    <name>龚泽颖</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的项目经历</title>
    <link href="https://serika-onoe.github.io/2022/12/09/%E6%88%91%E7%9A%84%E7%A7%91%E7%A0%94%E7%BB%8F%E5%8E%86/"/>
    <id>https://serika-onoe.github.io/2022/12/09/%E6%88%91%E7%9A%84%E7%A7%91%E7%A0%94%E7%BB%8F%E5%8E%86/</id>
    <published>2022-12-09T03:10:23.000Z</published>
    <updated>2022-12-11T06:55:19.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件编程项目"><a href="#软件编程项目" class="headerlink" title="软件编程项目"></a>软件编程项目</h1><h2 id="无人机集群电磁仿真设计"><a href="#无人机集群电磁仿真设计" class="headerlink" title="无人机集群电磁仿真设计"></a>无人机集群电磁仿真设计</h2><p>2021.1 - 2021.8</p><hr><h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><p>我们通过以下步骤解决无人机集群的目标电磁特征数据的获取问题，提出了解决无人机集群问题目标检测的创新思路。</p><p>首先，以 “Gremlin “无人机为代表的典型单架固定翼无人机为例，基于多级快速多极法（MLFMM）进行电磁计算。然后，利用雷达散射截面（RCS）仿真数据和二维反合成孔径雷达（ISAR）成像来验证上述仿真结果的结果准确性。最后，我们对无人机集群的RCS模拟数据进行了模拟和验证。</p><p>用到的编程语言和软件工具有：</p><p>（1）Solidworks – 建立两类无人机的三维模型<br>（2）Feko电磁仿真软件 – 基于MLFMM对无人机进行电磁仿真计算<br>（3）MATLAB – 仿真数据清洗和处理，ISAR成像算法实现</p><h3 id="成绩："><a href="#成绩：" class="headerlink" title="成绩："></a>成绩：</h3><p>该项目过程和结论已在2021年的CIE雷达会议上提出。</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/uav_prove.jpg"></p><p>我们总结和分析了无人机目标 “Gremlin “在单一和集群情况下的电磁散射计算，这些都是基于的应用要求和技术困难。全极化静态电磁散射计算了 “Gremlin “在典型频段的全极化静态电磁散射特征数据，并将其结果用于进行集群目标成像，可以清楚地看到 “Gremlin “的翼尖特征。</p><h4 id="固定翼代表1–美军“捕食者”无人机"><a href="#固定翼代表1–美军“捕食者”无人机" class="headerlink" title="固定翼代表1–美军“捕食者”无人机"></a>固定翼代表1–美军“捕食者”无人机</h4><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_match%2F0%2F2985298796%2F0.jpg&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1617869104&t=54d2c95a6f95de01679291e9b76837dd"></p><center>固定翼代表1--美军“捕食者”无人机实物图</center><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/uav1.jpg"></p><center>固定翼代表1--美军“捕食者”无人机模型图</center><h4 id="固定翼代表2–美军“小精灵”无人机"><a href="#固定翼代表2–美军“小精灵”无人机" class="headerlink" title="固定翼代表2–美军“小精灵”无人机"></a>固定翼代表2–美军“小精灵”无人机</h4><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/uav2.jpg"></p><center>固定翼代表2--美军“小精灵”无人机实物图</center><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/uav3.jpg"></p><center>固定翼代表2--美军“小精灵”无人机模型图</center><h4 id="旋翼代表–大疆F450无人机"><a href="#旋翼代表–大疆F450无人机" class="headerlink" title="旋翼代表–大疆F450无人机"></a>旋翼代表–大疆F450无人机</h4><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/uav4.jpg"></p><center>旋翼代表--大疆F450无人机实物图</center><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/uav5.jpg"></p><center>旋翼代表--大疆F450无人机模型图</center> <h2 id="弱监督条件下的点云语义理解"><a href="#弱监督条件下的点云语义理解" class="headerlink" title="弱监督条件下的点云语义理解"></a>弱监督条件下的点云语义理解</h2><p>2020.10 - 2021.1</p><hr><h3 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h3><p>为解决三维点云语义分割中数据标注昂贵的问题，尝试使用弱监督学习的方法进行研究。进行了论文综述，同时复现了“PointNet++”代码。</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/pointcloud%20mind.png"></p><p>用到的编程语言和软件工具有：</p><p>（1）Python – 通过Jupyter Notebook复现代码</p><h3 id="成绩：-1"><a href="#成绩：-1" class="headerlink" title="成绩："></a>成绩：</h3><p>基于百度AI平台的PaddlePaddle框架，对十组家具图片生成的无序点云进行分类处理，复现了“PointNet++”论文中91.9%的准确率。</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/point%20cloud2.jpg"></p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/point%20cloud3.jpg"></p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/point%20cloud4.jpg"></p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/point%20cloud5.jpg"></p><h2 id="Python爬取国家统计数据"><a href="#Python爬取国家统计数据" class="headerlink" title="Python爬取国家统计数据"></a>Python爬取国家统计数据</h2><p>2021.1</p><hr><h3 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h3><p>独立完成，爬取“国家统计局”八个省份、六个季度的城乡居民收支基本情况</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/crawl%20mind.jpg"></p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/crawl2.jpg"></p><p>用到的编程语言和软件工具有：</p><p>（1）Python – 通过panda库实现爬虫功能，通过xlwings库实现表格处理</p><h3 id="成绩：-2"><a href="#成绩：-2" class="headerlink" title="成绩："></a>成绩：</h3><p>爬取国家统计局八个省份、六个季度的表格数据到excel表格中，同时代码可筛去无效数据，自动整理excel表格，通过xlwings库实现数据居中、自适应列宽等功能。</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/crawl3.jpg"></p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/crawl4.jpg"></p><h2 id="app制作与安全性分析"><a href="#app制作与安全性分析" class="headerlink" title="app制作与安全性分析"></a>app制作与安全性分析</h2><p>2019.10 - 2020.1</p><hr><h3 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h3><p>app实现要求:该app具有用户&#x2F;口令登录功能，并可供使用者注册。注册时口令只作长度限制（如8位长度），但强度暂不作要求。用户名&#x2F;口令保存在手机上，口令保存时作加密处理（自行选择加密算法）。</p><p>功能比较简单，弹出一浮窗，显示app需要获取存储空间、设备信息、地理位置权限的提示，可选择授权或拒绝。通过在手机上运行此app，注册若干个账号，口令设置时有强口令，也有弱口令，然后分析其安全性，加以改进。</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/app1.png"></p><p>客户端登录功能的相关代码（Kotlin）：</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/app2.png"></p><p>获取存储空间、设备信息、地理位置权限这些权限的相关语句：</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/app3.png"></p><p>Androbugs分析截图：</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/app5.png"></p><p>分析后修改了原有app的注册&#x2F;登录认证方式，采用OAuth2规范中的授权码模式：</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/app6.png"></p><p>将外部存储改为内部存储：</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/app7.png"></p><p>用到的编程语言和软件工具有：</p><p>（1）Kotlin – 通过Android Studio实现app功能<br>（2）Androbugs – 分析app安全性</p><h3 id="成绩：-3"><a href="#成绩：-3" class="headerlink" title="成绩："></a>成绩：</h3><p>完整的运行视频如下：</p> <iframe height=498 width=510 src='https://player.youku.com/embed/XNDg0MTQwNjUwOA==' frameborder=0 allowfullscreen></iframe>  <h2 id="绕过认证系统实验"><a href="#绕过认证系统实验" class="headerlink" title="绕过认证系统实验"></a>绕过认证系统实验</h2><p>2019.9</p><hr><h3 id="描述：-4"><a href="#描述：-4" class="headerlink" title="描述："></a>描述：</h3><p>很多商场、饭店的商业WIFI采用了WEB Portal认证方式，但有些认证系统存在漏洞，可以利用 DNS TUNNEL 绕过网关计费系统。存在这种漏洞的商业WIFI环境，并且可验证能够利用 DNS TUNNEL 穿越网关计费系统。</p><p>DNS Tunnel真正用来“免密上网”，其实不太实际。尽管我们组已经“砍掉了”云服务器的开支（把代理服务器搬到本地来进行了），结果整个实验还是花掉了6块钱来购买域名。</p><p>用到的编程语言和软件工具有：</p><p>（1）树莓派 – 搭建本地代理服务器<br>（2）Portal – 拓扑结构分析和DNS仿真配置</p><h3 id="成绩：-4"><a href="#成绩：-4" class="headerlink" title="成绩："></a>成绩：</h3><p>整个实验其实是告诉我们：黑客会“见缝插针”，DNS这样专门用于域名查询的协议，也可以被拿来传输数据。若将来需要做网络应用层的协议设计、维护工作，一定要加倍小心，在网络安全方面要非常谨慎。另外对于个人来说，如果连接到公共网络，一定要提高警惕，谨防“高科技偷窃”，因为我们难以知道黑客下一个目标是哪里。</p><iframe height=498 width=510 src='https://player.youku.com/embed/XNDg5NzI1OTY0OA==' frameborder=0 allowfullscreen></iframe><h2 id="AI玩俄罗斯方块"><a href="#AI玩俄罗斯方块" class="headerlink" title="AI玩俄罗斯方块"></a>AI玩俄罗斯方块</h2><p>2018.9</p><hr><h3 id="描述：-5"><a href="#描述：-5" class="headerlink" title="描述："></a>描述：</h3><p>利用pygame实现俄罗斯方块游戏，同时设置了一个AI（甚至都可以不用机器学习算法）</p><p>用到的编程语言和软件工具有：</p><p>（1）Python – 实现俄罗斯方块逻辑和AI算法</p><p>AI 算法基本思想就是，遍历当前可操作的俄罗斯方块和下一个可操作的俄罗斯方块(根据不同的策略，即选择不同的位置和旋转角度)下落到底部后组成的所有可能的未来场景   </p><p>未来场景的优劣判断依据：</p><pre><code>1）可消除的行数；2）堆积后的俄罗斯方块内的虚洞数量；3）堆积后的俄罗斯方块内的小方块数量；4）堆积后的俄罗斯方块的最高点；5）堆积后的俄罗斯方块的高度(每一列都有一个高度)标准差；6）堆积后的俄罗斯方块的高度一阶前向差分；7）堆积后的俄罗斯方块的高度一阶前向差分的标准差；8）堆积后的俄罗斯方块的最高点和最低点之差。</code></pre><p>从这些未来场景中选择一个最优的，其对应的当前可操作的俄罗斯方块的行动策略即为当前解 </p><h3 id="成绩：-5"><a href="#成绩：-5" class="headerlink" title="成绩："></a>成绩：</h3><p>视频演示一边拖动源码一边游戏在自动运行，以显示不是手动操作的hh</p> <iframe height=498 width=510 src='https://player.youku.com/embed/XNDg0MTAwMTY4MA==' frameborder=0 allowfullscreen></iframe>   <h2 id="手写数字识别GUI"><a href="#手写数字识别GUI" class="headerlink" title="手写数字识别GUI"></a>手写数字识别GUI</h2><p>2020.11 - 2021.1</p><hr><h3 id="描述：-6"><a href="#描述：-6" class="headerlink" title="描述："></a>描述：</h3><p>不使用框架，实现手写数字识别GUI开发</p><p>用到的编程语言和软件工具有：</p><p>（1）Python – 开发GUI界面（基于Qt5），涉及基本bp算法实现和正则化（BN，L2正则化，RMSProp）等优化算法，并实现pyqt界面及三个功能:mnist中抽取识别,上传图片识别,画板手写识别</p><h3 id="成绩：-6"><a href="#成绩：-6" class="headerlink" title="成绩："></a>成绩：</h3> <iframe height=498 width=510 src='https://player.youku.com/embed/XNDg0MTAwMDg3Mg==' frameborder=0 allowfullscreen></iframe>   <h2 id="马里奥DIY版"><a href="#马里奥DIY版" class="headerlink" title="马里奥DIY版"></a>马里奥DIY版</h2><p>2018.4 - 2018.6</p><hr><h3 id="描述：-7"><a href="#描述：-7" class="headerlink" title="描述："></a>描述：</h3><p>DIY了一个马里奥，在原版的基础上改变了生命设定和地图场景：</p><p>生命上限可以通过吃蘑菇增加，并回复一部分血量，同时若身体是小人形态则变成大人形态。受击时形态不变化，扣相应的HP。</p><p>用到的编程语言和软件工具有：</p><p>（1）Gamemaker – 开发游戏界面，绘制游戏地图及玩法逻辑实现</p><p>成绩：</p><p><strong>通关演示及简单功能演示</strong></p> <iframe height=498 width=510 src='https://player.youku.com/embed/XNDg0MTAwMjQxMg==' frameborder=0 allowfullscreen></iframe>   <p><strong>若HP为0，则直接死亡</strong></p> <iframe height=498 width=510 src='https://player.youku.com/embed/XNDg0MTAwNDE1Mg==' frameborder=0 allowfullscreen></iframe>  <h2 id="简易版魔塔"><a href="#简易版魔塔" class="headerlink" title="简易版魔塔"></a>简易版魔塔</h2><p>2017.11 - 2018.1</p><hr><p>###描述：</p><p>命令行界面，可操作的简易版魔塔</p><p>用到的编程语言和软件工具有：</p><p>（1）C++ – 通过命令行和字符串绘制游戏地图及玩法逻辑实现</p><h3 id="成绩：-7"><a href="#成绩：-7" class="headerlink" title="成绩："></a>成绩：</h3><p><strong>通关演示及简单功能演示</strong></p><iframe height=498 width=510 src='https://player.youku.com/embed/XNDg5NzU4NDgzMg==' frameborder=0 allowfullscreen></iframe><h2 id="疫情地图小程序"><a href="#疫情地图小程序" class="headerlink" title="疫情地图小程序"></a>疫情地图小程序</h2><p>2020.6</p><hr><h3 id="描述：-8"><a href="#描述：-8" class="headerlink" title="描述："></a>描述：</h3><p>疫情期间做的一个疫情地图，分为国内、国外两个板块，每个板块分为当日累计疫情、当日新增疫情两个子板块，引用了开课吧的数据源，颜色越深说明感染人数越多。</p><p>用到的编程语言和软件工具有：</p><p>（1）html – 引用开课吧数据源，尝试进行数字可视化</p><h3 id="成绩：-8"><a href="#成绩：-8" class="headerlink" title="成绩："></a>成绩：</h3><iframe height=498 width=510 src='https://player.youku.com/embed/XNDg5NzI4NDU0MA==' frameborder=0 allowfullscreen></iframe><h1 id="硬件控制项目"><a href="#硬件控制项目" class="headerlink" title="硬件控制项目"></a>硬件控制项目</h1><h2 id="玩具狗的多种开关方式"><a href="#玩具狗的多种开关方式" class="headerlink" title="玩具狗的多种开关方式"></a>玩具狗的多种开关方式</h2><h2 id="GPS欺骗"><a href="#GPS欺骗" class="headerlink" title="GPS欺骗"></a>GPS欺骗</h2><p>2019.9 - 2019.11</p><hr><h3 id="描述：-9"><a href="#描述：-9" class="headerlink" title="描述："></a>描述：</h3><p>在Linux环境下，应用GPS卫星定位的手机,通过HackRF One发射欺骗信号，实现点到点欺骗或轨迹欺骗，可在1、2分钟内成功欺骗到指定位置在指定轨迹内依据给定的加速度、速度进行不间断运动。</p><p>用到的编程语言和软件工具有：</p><p>（1）硬件：HackRF One – 带 TCXO 时钟模块和天线，用于发射GPS信号<br> (2) 软件：</p><table><thead><tr><th>软件</th><th>作用</th></tr></thead><tbody><tr><td>Google Earth</td><td>选中欺骗地点，勾画目标轨迹</td></tr><tr><td>SatGen</td><td>目标轨迹并存储为运动路径</td></tr><tr><td>gps-sdr-sim</td><td>采样数据文件，生成GPS数据源</td></tr><tr><td>Gnuradio</td><td>流程图式运行GPS欺骗的程序</td></tr><tr><td>hackrf-tools</td><td>通过hackrf_transfer函数，在命令行运行GPS欺骗</td></tr></tbody></table><p><img src="https://github.com/serika-onoe/web-img/raw/main/Experience/gps%20mind.png"></p><h3 id="成绩：-9"><a href="#成绩：-9" class="headerlink" title="成绩："></a>成绩：</h3><p>实际手机位于广州大学城生活区某一定点静止不动，将定位欺骗至1千公里外的上海交大的操场跑道上变速跑步,全程精确度5m以内。</p> <iframe height=498 width=510 src='https://player.youku.com/embed/XNDg0MTAwNDUyOA==' frameborder=0 allowfullscreen></iframe>  <p>2020.11 - 2021.1</p><hr><h3 id="描述：-10"><a href="#描述：-10" class="headerlink" title="描述："></a>描述：</h3><p>根据玩具电子狗，通过其电路图进行相应修改，可得到不同开关相应方式，除了下面视频外也已经实现磁控、小程序控制、蓝牙控制等方式</p><p>用到的硬件模块有：</p><p> (1) 玩具电子狗 – 具备基本行走，吠叫功能<br> (2) 电路板 – 实现不同方式开关并焊接电路<br>（3) 蓝牙开关模块 – 具有微信小程序控制系统</p><h3 id="成绩：-10"><a href="#成绩：-10" class="headerlink" title="成绩："></a>成绩：</h3><p><strong>键控开关方式</strong></p><iframe height=498 width=510 src='https://player.youku.com/embed/XNDg5NzI5MDU0MA==' frameborder=0 allowfullscreen></iframe><p><strong>温控开关方式</strong></p><iframe height=498 width=510 src='https://player.youku.com/embed/XNDg5NzI5MDcyMA==' frameborder=0 allowfullscreen></iframe><h2 id="基于Arduino的音乐播放器"><a href="#基于Arduino的音乐播放器" class="headerlink" title="基于Arduino的音乐播放器"></a>基于Arduino的音乐播放器</h2><p>2020.4 - 2020.6</p><hr><h3 id="描述：-11"><a href="#描述：-11" class="headerlink" title="描述："></a>描述：</h3><p>通过手机(串口)或电脑输入控制，实现了MP3的基本功能（曲目切换，多种播放模式，音量调节）。</p><p>用到的硬件模块有：</p><p> (1) Arduino – 中央处理器<br> (2) tf卡 – 存储曲目<br>（3) 扬声器 – 播放声音<br> (4) LCD屏幕 – 显示播放模式、曲目</p><h3 id="成绩：-11"><a href="#成绩：-11" class="headerlink" title="成绩："></a>成绩：</h3><iframe height=498 width=510 src='https://player.youku.com/embed/XNDg0MTAzMDQwOA==' frameborder=0 allowfullscreen></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件编程项目&quot;&gt;&lt;a href=&quot;#软件编程项目&quot; class=&quot;headerlink&quot; title=&quot;软件编程项目&quot;&gt;&lt;/a&gt;软件编程项目&lt;/h1&gt;&lt;h2 id=&quot;无人机集群电磁仿真设计&quot;&gt;&lt;a href=&quot;#无人机集群电磁仿真设计&quot; class=&quot;header</summary>
      
    
    
    
    <category term="总结" scheme="https://serika-onoe.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="科研" scheme="https://serika-onoe.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
    <category term="项目" scheme="https://serika-onoe.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫爬取国家统计局数据</title>
    <link href="https://serika-onoe.github.io/2021/01/13/Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E5%9B%BD%E5%AE%B6%E7%BB%9F%E8%AE%A1%E5%B1%80%E6%95%B0%E6%8D%AE/"/>
    <id>https://serika-onoe.github.io/2021/01/13/Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E5%9B%BD%E5%AE%B6%E7%BB%9F%E8%AE%A1%E5%B1%80%E6%95%B0%E6%8D%AE/</id>
    <published>2021-01-12T16:12:47.000Z</published>
    <updated>2022-12-11T03:54:37.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-爬虫爬取国家统计局数据"><a href="#Python-爬虫爬取国家统计局数据" class="headerlink" title="Python 爬虫爬取国家统计局数据"></a>Python 爬虫爬取国家统计局数据</h1><p><strong>本次实验以爬取“<a href="https://data.stats.gov.cn/index.htm">国家统计局</a>”首页中的【上海市城乡居民收支基本情况】为例，国家统计局其他页面的爬取方法大同小异</strong></p><h2 id="1-爬虫基本流程"><a href="#1-爬虫基本流程" class="headerlink" title="1.爬虫基本流程"></a>1.爬虫基本流程</h2><ol><li>发起请求：通过http&#x2F;https库向目标站点发起请求，即发送一个request，请求可以包含额外的headers等信息，等待服务器响应</li><li>获取相应内容：如果服务器能正常响应，会得到一个response，response的内容便是所要获取的页面内容，类型可能有HTML，json字符串，二进制数据（如图片视频）等类型</li><li>解析内容：得到的内容可能是HTML，可以用正则表达式，网页解析库进行解析，可能是json，可以直接转为json对象，可能是二进制数据，可以做保存或者进一步的处理<br><strong>（本次实验得到的解析内容是json）</strong></li><li>保存数据：可以存为文本，也可以保存至数据库，或者特定格式的文件</li></ol><h2 id="2-打开网页并分析"><a href="#2-打开网页并分析" class="headerlink" title="2.打开网页并分析"></a>2.打开网页并分析</h2><p>国家统计局的网站很奇怪，明明是https却会告警不安全，首次打开界面如下（本人使用的是谷歌浏览器）</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/1.jpg"></p><p>点击“高级”-“继续前往”，方可进入首页</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/2.jpg"></p><p>选择“季度数据”-“分省季度数据”</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/3.jpg"></p><p>选择“人民生活”-“城乡收支情况”</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/4.jpg"></p><p>地区修改为“上海市”</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/5.jpg"></p><p>按下F12，进入浏览器调试模式</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/6.jpg"></p><p>刷新重新获取网页信息，找到easyquery.htm?m&#x3D;Query Data&amp;dbc…的文件。可以先选中”XHR”过滤条件，缩小查找范围</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/7.jpg"></p><p>怎么确认这个文件就包含有我们要找的数据呢？点击“response”板块，向右拖动滑块可以看到表格数据可以一一对应（但数据并没有连续出现）</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/8.jpg"></p><p><strong>注意：这里的data和strdata看上去一样，但实际格式不一样，data是int或double格式，strdata是str格式，这个表格有一些空数据行，字符串格式方便做判断，字符串转数字使用eval()即可</strong></p><h2 id="3-完整代码及解析"><a href="#3-完整代码及解析" class="headerlink" title="3.完整代码及解析"></a>3.完整代码及解析</h2><p><strong>注：缺少的库可以在命令行使用pip命令安装，如缺少requests库，可以在命令行输入命令</strong></p><p><code>pip install requests</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3 </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 使用urllib3.disable_warnings()在关闭SSL认证（verify=False）情况下</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 将requests请求禁用安全请求警告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests    <span class="comment"># 使用Requests发送网络请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time      <span class="comment"># 用来获取时间戳(计算当前时间，用于网页验证)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json      <span class="comment"># 处理json文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 处理数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># np.array()转换成pd.DataFrame格式，再使用to_excel()写入excel表格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 获取毫秒级时间戳，用于网页验证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getTime</span>():</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 数据预处理，获取json列表中层层包裹的strdata元素（数据）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getList</span>(<span class="params">length</span>):</span><br><span class="line"></span><br><span class="line">  <span class="type">List</span>=[]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line"></span><br><span class="line">​    temp = js[<span class="string">&#x27;returndata&#x27;</span>][<span class="string">&#x27;datanodes&#x27;</span>][i][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;strdata&#x27;</span>]</span><br><span class="line"></span><br><span class="line">​    \<span class="comment"># 城乡居民收支列表中，原网站有同比增长数据为空，若直接使用eval()会报错，需要先判断</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(<span class="built_in">len</span>(temp)!=<span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">​      \<span class="comment"># eval()数字转字符串</span></span><br><span class="line"></span><br><span class="line">​      <span class="type">List</span>.append(<span class="built_in">eval</span>(temp))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 请求目标网址(链接?前面的东西)</span></span><br><span class="line"></span><br><span class="line">  url=<span class="string">&#x27;https://data.stats.gov.cn/easyquery.htm&#x27;</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 请求头，User-Agent: 用来证明你是浏览器，满足一定格式即可，不一定和自己的浏览器一样</span></span><br><span class="line"></span><br><span class="line">  headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0(Windows;U;Windows NT6.1;en-US;rv:1.9.1.6) Geko/20091201 Firefox/3.5.6&#x27;</span>&#125;<span class="comment">#浏览器代理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 构造参数键值对，具体数值从网页结构参数中获取</span></span><br><span class="line"></span><br><span class="line">  key=&#123;&#125;</span><br><span class="line"></span><br><span class="line">  key[<span class="string">&#x27;m&#x27;</span>]=<span class="string">&#x27;QueryData&#x27;</span></span><br><span class="line"></span><br><span class="line">  key[<span class="string">&#x27;dbcode&#x27;</span>]=<span class="string">&#x27;fsjd&#x27;</span></span><br><span class="line"></span><br><span class="line">  key[<span class="string">&#x27;rowcode&#x27;</span>]=<span class="string">&#x27;zb&#x27;</span></span><br><span class="line"></span><br><span class="line">  key[<span class="string">&#x27;colcode&#x27;</span>]=<span class="string">&#x27;sj&#x27;</span></span><br><span class="line"></span><br><span class="line">  key[<span class="string">&#x27;wds&#x27;</span>]=<span class="string">&#x27;[&#123;&quot;wdcode&quot;:&quot;reg&quot;,&quot;valuecode&quot;:&quot;310000&quot;&#125;]&#x27;</span></span><br><span class="line"></span><br><span class="line">  key[<span class="string">&#x27;k1&#x27;</span>]=<span class="built_in">str</span>(getTime()) </span><br><span class="line"></span><br><span class="line">  \<span class="comment"># &quot;wdcode&quot;:&quot;reg&quot; 地区栏</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 上海 310000 </span></span><br><span class="line"></span><br><span class="line">  key[<span class="string">&#x27;dfwds&#x27;</span>]=<span class="string">&#x27;[&#123;&quot;wdcode&quot;:&quot;zb&quot;,&quot;valuecode&quot;:&quot;A0300&quot;&#125;,&#123;&quot;wdcode&quot;:&quot;sj&quot;,&quot;valuecode&quot;:&quot;LAST6&quot;&#125;]&#x27;</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># &quot;wdcode&quot;:&quot;zb&quot; 选取左侧哪个条目,&quot;wdcode&quot;:&quot;sj&quot;选项框中选取&quot;最近6季度&quot;</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 禁用安全请求警告</span></span><br><span class="line"></span><br><span class="line">  requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 发出请求，使用post方法，这里使用前面自定义的头部和参数</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># ！！！verify=False，国家统计局20年下半年改用https协议,若不加该代码无法通过SSL验证</span></span><br><span class="line"></span><br><span class="line">  r = requests.post(url, headers=headers, params=key,verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 使用json库中loads函数，将r.text字符串解析成dict字典格式存储于js中</span></span><br><span class="line"></span><br><span class="line">  js = json.loads(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 得到所需数据的一维数组，利用np.array().reshape()整理为二维数组</span></span><br><span class="line"></span><br><span class="line">  length=<span class="built_in">len</span>(js[<span class="string">&#x27;returndata&#x27;</span>][<span class="string">&#x27;datanodes&#x27;</span>])</span><br><span class="line"></span><br><span class="line">  res=getList(length)</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 总数据划分成6行的格式</span></span><br><span class="line"></span><br><span class="line">  array=np.array(res).reshape(<span class="built_in">len</span>(res)//<span class="number">6</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># np.array()转换成pd.DataFrame格式，后续可使用to_excel()直接写入excel表格</span></span><br><span class="line"></span><br><span class="line">  df_shanghai=pd.DataFrame(array)</span><br><span class="line"></span><br><span class="line">  df_shanghai.columns=[<span class="string">&#x27;2020年第三季度&#x27;</span>,<span class="string">&#x27;2020年第二季度&#x27;</span>,<span class="string">&#x27;2020年第一季度&#x27;</span>,<span class="string">&#x27;2019年第四季度&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​        <span class="string">&#x27;2019年第三季度&#x27;</span>,<span class="string">&#x27;2019年第二季度&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  df_shanghai.index=[<span class="string">&#x27;居民人均可支配收入累计值(元)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​       <span class="string">&#x27;城镇居民人均可支配收入累计值(元)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​       <span class="string">&#x27;农村居民人均可支配收入累计值(元)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​       <span class="string">&#x27;居民人均消费支出累计值(元)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​        <span class="string">&#x27;城镇居民人均消费支出累计值(元)&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​       <span class="string">&#x27;农村居民人均消费支出累计值(元)&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(df_shanghai)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/9.jpg"></p><h2 id="4-部分代码说明"><a href="#4-部分代码说明" class="headerlink" title="4.部分代码说明"></a>4.部分代码说明</h2><h3 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h3><p>得到表格中的数据需要先分析提取到的js文件，打印内容如下：</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/10.jpg"></p><p>将五层列表层层剥开，得到需要的strdata</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/11.jpg"></p><h3 id="请求网站"><a href="#请求网站" class="headerlink" title="请求网站"></a>请求网站</h3><p>请求目标网址(‘’?’’前面的东西)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">&#x27;https://data.stats.gov.cn/easyquery.htm&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/12.jpg"></p><p>请求头，User-Agent: 用来证明你是浏览器，满足一定格式即可，不一定要和自己的浏览器一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0(Windows;U;Windows NT6.1;en-US;rv:1.9.1.6) Geko/20091201 Firefox/3.5.6&#x27;</span>&#125;<span class="comment">#浏览器代理</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/13.jpg"></p><p>构造参数键值对，下列参数会以 &amp; 连接，放在链接的’’?’’后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key=&#123;&#125;</span><br><span class="line">key[<span class="string">&#x27;m&#x27;</span>]=<span class="string">&#x27;QueryData&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;dbcode&#x27;</span>]=<span class="string">&#x27;fsjd&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;rowcode&#x27;</span>]=<span class="string">&#x27;zb&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;colcode&#x27;</span>]=<span class="string">&#x27;sj&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;wds&#x27;</span>]=<span class="string">&#x27;[&#123;&quot;wdcode&quot;:&quot;reg&quot;,&quot;valuecode&quot;:&quot;310000&quot;&#125;]&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;k1&#x27;</span>]=<span class="built_in">str</span>(getTime())  </span><br><span class="line">key[<span class="string">&#x27;dfwds&#x27;</span>]=<span class="string">&#x27;[&#123;&quot;wdcode&quot;:&quot;zb&quot;,&quot;valuecode&quot;:&quot;A0300&quot;&#125;,&#123;&quot;wdcode&quot;:&quot;sj&quot;,&quot;valuecode&quot;:&quot;LAST6&quot;&#125;]&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/14.jpg"></p><p>部分参数可以从下图所示位置查看到，有些不显示的为默认，如果需要显示相同页面，需选取选项框中的相应选项</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/15.jpg"></p><h2 id="5-数据保存到excel表格"><a href="#5-数据保存到excel表格" class="headerlink" title="5.数据保存到excel表格"></a>5.数据保存到excel表格</h2><p>爬虫爬到的数据现以panda.dataframe格式存储，可以利用to_excel()函数，直接保存在excel表格中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># write对象为该Excel工作簿，使用该方法保存多个工作表</span></span><br><span class="line">    write = pd.ExcelWriter(<span class="string">&#x27;F:/Ivory_Tower/norm/分省季度数据_城乡居民收支.xls&#x27;</span>) <span class="comment">#该路径自己设置即可，没有该文件的话会自行创建一个，存在的话写入会覆盖原内容</span></span><br><span class="line">    df_shanghai.to_excel(write,sheet_name=<span class="string">&#x27;上海&#x27;</span>)</span><br><span class="line">    <span class="comment">#如果爬多个省份的数据，可以写入多个工作表，且必须要加上save()保存</span></span><br><span class="line">    write.save()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/16.jpg"></p><h2 id="6-表格优化（可选）"><a href="#6-表格优化（可选）" class="headerlink" title="6.表格优化（可选）"></a>6.表格优化（可选）</h2><p>可以借助python代码，优化表格格式，如上图所示的结果不尽人意，至少还需要自动调整列宽。</p><p>这里本人采用xlwings库，需要先在命令行下载相应的库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install xlwings</span><br><span class="line">pip install pywin32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用xlwings库，利用python编辑整理Excel表格</span></span><br><span class="line"><span class="keyword">import</span> xlwings <span class="keyword">as</span> xw</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app=xw.App(visible=<span class="literal">False</span>,add_book=<span class="literal">False</span>) <span class="comment">#过程不可见，不添加新工作表</span></span><br><span class="line">    wb=app.books.<span class="built_in">open</span>(<span class="string">r&#x27;F:/Ivory_Tower/norm/分省季度数据_城乡居民收支.xls&#x27;</span>)</span><br><span class="line">    <span class="comment"># wb就是新建的工作簿(workbook)</span></span><br><span class="line">    <span class="comment"># 对8个工作表，分别进行操作</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>): </span><br><span class="line">        rng=wb.sheets[i].<span class="built_in">range</span>(<span class="string">&#x27;A1:H20&#x27;</span>)      <span class="comment"># 选中这些单元格</span></span><br><span class="line">        rng.api.HorizontalAlignment = -<span class="number">4108</span>   <span class="comment"># 文字水平方向居中</span></span><br><span class="line">        rng.autofit()                         <span class="comment"># 自动调整行高列宽</span></span><br><span class="line">    wb.save()</span><br><span class="line">    wb.close()</span><br><span class="line">    app.quit()</span><br></pre></td></tr></table></figure><p>运行代码，即可得到以下效果 （后续多爬了其他一些省份，在key处修改相应参数即可）</p><p><img src="https://github.com/serika-onoe/web-img/raw/main/Python_crawler/17.jpg"></p><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7.参考资料"></a>7.参考资料</h2><p>史上超详细python爬取国家统计局数据：<a href="https://blog.csdn.net/qq_41988893/article/details/103017854">https://blog.csdn.net/qq_41988893/article/details/103017854</a></p><p>如果报其他各种各样莫名其妙的错，可以评论或私信询问哦~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python-爬虫爬取国家统计局数据&quot;&gt;&lt;a href=&quot;#Python-爬虫爬取国家统计局数据&quot; class=&quot;headerlink&quot; title=&quot;Python 爬虫爬取国家统计局数据&quot;&gt;&lt;/a&gt;Python 爬虫爬取国家统计局数据&lt;/h1&gt;&lt;p&gt;&lt;stron</summary>
      
    
    
    
    <category term="项目详情" scheme="https://serika-onoe.github.io/categories/%E9%A1%B9%E7%9B%AE%E8%AF%A6%E6%83%85/"/>
    
    
    <category term="Python" scheme="https://serika-onoe.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://serika-onoe.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>游戏内抽卡机制总结</title>
    <link href="https://serika-onoe.github.io/2020/09/06/%E6%B8%B8%E6%88%8F%E5%86%85%E6%8A%BD%E5%8D%A1%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://serika-onoe.github.io/2020/09/06/%E6%B8%B8%E6%88%8F%E5%86%85%E6%8A%BD%E5%8D%A1%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-06T03:00:00.000Z</published>
    <updated>2022-12-11T03:55:10.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>卡牌类游戏很好地搭载了二次元的核心元素——“角色”，抽卡活动对库存货币消耗和新增货币均有很大的正面作用，且参与了抽卡活动的玩家也占了充值用户相当高的比例。抽卡活动确实是当前非常重要的付费点</p><p>但本人深知“玄不改非，氪能改命”，而因为是轻度玩家并不想充钱变强，所以卡牌游戏玩的并不多，阴阳师、明日方舟、剑与远征等都略有接触，而每个游戏都有着属于自己的抽卡概率。</p><p>像阴阳师的SSR大体在1%左右，而剑与远征的概率在4.8%左右，但为了用户体验，最重要的是不能让时间玩家拉开RMB玩家的差距，不能违反大R碾压小R的原则，所以所谓随机基本都是伪随机。</p><p>纯干货，为了不影响阅读就不放图片了，下面介绍一些常见的抽卡机制。</p><h3 id="①保底机制"><a href="#①保底机制" class="headerlink" title="①保底机制"></a>①保底机制</h3><p>这是最简单，也最普遍的一种机制，如《王者荣耀》，购买次数到达361次时，荣耀水晶产出概率为100%。《剑与远征》两个保底机制，30抽必出紫卡，在同卡池内累计抽30次即可获得出一张紫卡英雄不论是单抽还是连抽，只要数量达到即必出紫卡。</p><p>还有一个保底机制就是10连抽必出一个稀有或者精英级别的英雄，和30抽不一样的地方在于只能是适用于十连抽而不能适用于十次单抽。</p><p>保底机制保证了玩家的最终体验</p><h3 id="②玄学抽奖法"><a href="#②玄学抽奖法" class="headerlink" title="②玄学抽奖法"></a>②玄学抽奖法</h3><p>在一些抽卡游戏里是用一定作用的，可能由于游戏开发者在写抽卡的程序时，有时候会引用其他数据，然后增加一定算法，来决定抽到哪一张卡，这就是玩家玄学的由来。</p><p>如果引用的数据是当前系统时间，那么有可能出现“凌晨某个时间点抽卡中奖率高，或者每小时的前十分钟中奖率高”</p><p>虽说结果都在你抽卡的那一刻，在服务器就决定好，这就与抽卡画出什么图案、使用哪种方法无关，但游戏厂商还是乐意留下一个玩家主导的过程，让玩家相信是抽卡过程影响抽卡结果，对抽卡这一过程充满仪式感。</p><h3 id="③概率递增（不知道业内是不是叫水位）"><a href="#③概率递增（不知道业内是不是叫水位）" class="headerlink" title="③概率递增（不知道业内是不是叫水位）"></a>③概率递增（不知道业内是不是叫水位）</h3><p>概率递增法，是指抽卡时，抽卡次数越多，爆率越高的抽卡方法。如果在还没累积到这个数值前已经抽到，那么就将概率归零。</p><p>可以让玩家的游戏体验保持在一个比较均衡的位置。</p><h3 id="④奖池划分"><a href="#④奖池划分" class="headerlink" title="④奖池划分"></a>④奖池划分</h3><p>这种抽卡方法比较复杂，在一些频繁出新卡的游戏里比较多。</p><p>当玩家抽取时候，会先判定玩家进入哪个奖池（R,SR,SSR），然后再判定玩家在这个奖池里抽到哪一张卡。如果官方加入一张新卡，会单出一个奖池，暗中去掉一张旧卡，玩家不会太过关注旧卡的出卡率，也乐意多抽出新卡。</p><h3 id="⑤剧本抽卡"><a href="#⑤剧本抽卡" class="headerlink" title="⑤剧本抽卡"></a>⑤剧本抽卡</h3><p>《空当接龙》所有的牌组都已经写好，每次开始游戏，就从牌组剧本中挑选一个。</p><p>《斗地主》游戏官方会特意编写出多连对，多飞机，多炸弹的牌组，随机发牌很可能出现散牌。</p><h3 id="⑥氪金区分抽卡"><a href="#⑥氪金区分抽卡" class="headerlink" title="⑥氪金区分抽卡"></a>⑥氪金区分抽卡</h3><p>原来的游戏是充值多少送一次抽奖，且一般都能得到非常珍贵的游戏道具。现在会暗中增加一个数据栏，计算玩家充值的数量，划分等级调整概率，来提高氪金玩家的游戏体验。</p><p>如果某种货币既可以从游戏内肝到，也可以选择充值得到，那么官方可以暗中设定一个状态栏，将活动肝到的和充值得到的区别开，每次抽奖，都会识别这次抽奖所使用的钻石是哪种类型的钻石。如果使用的过程中两种同时使用，可能默认都是充值得到的，这时概率会比用肝到的大。</p><h3 id="⑦与抽卡促销的其他玩法"><a href="#⑦与抽卡促销的其他玩法" class="headerlink" title="⑦与抽卡促销的其他玩法"></a>⑦与抽卡促销的其他玩法</h3><p>常见的表现方式是进入游戏，就给玩家一笔足够首抽的钱，引导玩家进行抽奖然后获得珍贵道具。</p><p>或者抽奖时，系统突然提醒你：你获得了一个购买稀有道具的机会，并附带增加时间限制。</p><p>还有一种方法是根据新玩家的道具需求，调整不同物品的爆率。比如收集套装正缺那一个部件，很可能抽奖的时候就爆出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;卡牌类游戏很好地搭载了二次元的核心元素——“角色”，抽卡活动对库存货币消耗和新增货币均有很大的正面作用，且参与了抽卡活动的玩</summary>
      
    
    
    
    <category term="游戏" scheme="https://serika-onoe.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="二次元" scheme="https://serika-onoe.github.io/tags/%E4%BA%8C%E6%AC%A1%E5%85%83/"/>
    
    <category term="抽卡" scheme="https://serika-onoe.github.io/tags/%E6%8A%BD%E5%8D%A1/"/>
    
    <category term="游戏" scheme="https://serika-onoe.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://serika-onoe.github.io/2020/02/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://serika-onoe.github.io/2020/02/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-02-11T04:14:00.000Z</published>
    <updated>2022-12-11T03:55:34.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h1><p>记录博客是酝酿很久的想法，相信多数人作出这一决定也都经历了较长时间的拖延症hh。不过除了习惯性偷懒，也有出于对自身技术水平不自信的考量，毕竟大牛是极少数，多数人不过是在平均线上徘徊。</p><p>不过大脑做决定并不是纯粹理性的，反而主要凭感性。立下了靶子，定下来方向，理性思维才会积极地把行为合理化。</p><p>对为什么突发奇想开始记录博客，个人总结了如下动机：</p><ul><li><p>无论课内外，本人都已养成了动笔前先查阅大量资料的习惯。心里对那些具有开源精神的大牛们、前辈们充满敬意和感激。很多时候，一个简洁清晰的结论、一行高度概括的代码，单靠自己的探索往往要事倍功半，甚至还可能因为其在知识盲区(Unknown Unknown)而作不必要的苦恼，被前辈们留下的博客文章中不经意地一语道破，这样的瞬间简直不要太多。</p></li><li><p>从一个纯小白进化到现在一个在很多领域都有些入门经验的….小白来说，也很希望把当时掉进去的坑补上，最起码在前面做个警示，新人在环境搭建阶段没必要走弯路，把重心放在解决需求的程序调试阶段，实现更高的自我提升效率。</p></li><li><p>俗话说得好：“好记性不如烂笔头。” 之前看过一本讲如何高效记笔记的书，但纸面的笔记也常常无法翻阅。加上现在经常用手机浏览很多碎片化的知识点，得不到有效的整理，博客的存在比起私人笔记，也有种民主监督的意味在里头，避免个人认知偏差和局限。</p></li><li><p>还有《暗时间》，让我受益匪浅，学习的时候我也会经常想象如何把知识向一个小白讲解，而博客也相当于把这个过程实例化，可视化。</p></li></ul><h1 id="博客记录什么"><a href="#博客记录什么" class="headerlink" title="博客记录什么"></a>博客记录什么</h1><p>大学期间，课内学的很多是原理层面的东西，课外兴趣广泛，为避免犯蜻蜓点水般浅尝辄止的毛病，我总结所学以下几个方面的知识技术，抽空进行记录：</p><ul><li>编程语言类：C、Python、JAVA等</li><li>软件安装类: Android Studio，WordPress等</li><li>音频编辑类：pr，ps，au等等</li></ul><p>博客更新频率尽量保持在一周一两次，在此先作个纪念，日后若需要再加更改。</p><p>有诗云:“青山一道同云雨，明月何曾是两乡。”</p><p>愿与诸君共勉。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么要写博客&quot;&gt;&lt;a href=&quot;#为什么要写博客&quot; class=&quot;headerlink&quot; title=&quot;为什么要写博客&quot;&gt;&lt;/a&gt;为什么要写博客&lt;/h1&gt;&lt;p&gt;记录博客是酝酿很久的想法，相信多数人作出这一决定也都经历了较长时间的拖延症hh。不过除了习惯性偷懒，</summary>
      
    
    
    
    <category term="总结" scheme="https://serika-onoe.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="第一" scheme="https://serika-onoe.github.io/tags/%E7%AC%AC%E4%B8%80/"/>
    
    <category term="介绍" scheme="https://serika-onoe.github.io/tags/%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
</feed>
